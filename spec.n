
	      Franz Inc. GNU Emacs/Common Lisp Interface

$Header: /repo/cvs.copy/eli/Attic/spec.n,v 1.5 1988/04/25 15:17:04 layer Exp $

This document is a specification of the Franz Inc. GNU Emacs interface
to Common Lisp, which is written entirely in GNU Emacs Lisp (version
18.50).

1. Introduction

   The purpose of this package is to facilitate the usage of the Lisp
environment.  To this end, GNU Emacs and Lisp have been tightly
coupled, and in the case of Sun Common Lisp 3.0 (or Allegro CL 3.0)
the interface uses TCP/IP UNIX domain sockets to allow the environment
of Emacs and Lisp to seem as one.

   Aside from the interface, there are other features of the general
subprocess manipulation, such as an input ring for handy retrieval of
previously typed input, filename completion, special handling of
certain subprocess specific keys (eg, ^C or ^D), and continuously
showing the output in a visible buffer.

   While editing Lisp source code, there are now commands which make
it easy to send to and receive information from Lisp.  For example: a
function can be sent to Lisp from a source buffer, a form in a Lisp
source buffer may be macroexpanded, and source for functions defined
by loading files into Lisp may be found via "M-x ." in Emacs.



2. Editing Lisp Source

   This package modifies `auto-mode-alist' so that the major modes
defined in this package are invoked when certain types of source files
are edited.  The filename extensions `.lisp' and `.cl' cause
`fi:common-lisp-mode' to be invoked The important actions done by the
two modes are (in order):

	1. setup local variables specific to the mode
	2. check for package info
	3. setup keymaps
	4. call hooks

2.1 Buffer-Local Variables

   A local variables are killed when a mode is entered--this is the
convention to insure that there are no name conflicts with user
variables.

2.2 Package Setup

   To correctly deal with the Common Lisp package system, Emacs must
know the package for each file, so that it may use this when sending
expressions from a buffer to Lisp.  The first line in the file, if it
contains "-*-" style mode definitions, is used to set the package from
the `package:' field.  If this attempt to set the package failed, then
the `in-package' form is parsed for the package name.  There is a
buffer-local variable which contains the name of the package, called
`fi:package'.


2.3 Keymaps

   The keymaps are setup only once, the first time a mode is entered.
The name of the variable which has the value of the keymap for a given
mode is obtained by adding the suffix `-map' to the name of the mode
function.

   The following functions are bound to keys in both Common Lisp mode:

%mode: fi:common-lisp-mode
%% fi:lisp-reindent-newline-indent
%% fi:lisp-eval-region
%% fi:lisp-eval-last-sexp
%% fi:lisp-eval-current-buffer
%% fi:lisp-eval-defun

   On a per-buffer basis, the following function may be used to tell
Emacs where to send Lisp expressions for the above commands:

%% fi:set-associated-sublisp

   The following functions are bound to keys in Common Lisp mode, and
require the TCP/IP communication channel to Lisp:

%% fi:lisp-find-tag
%% fi:lisp-tags-loop-continue
%% fi:lisp-arglist
%% fi:lisp-describe
%% fi:lisp-function-documentation
%% fi:lisp-macroexpand
%% fi:lisp-walk

   The initial local bindings are:

%mode: fi:common-lisp-mode
%% fi:common-lisp-mode-map


2.4 Hooks

   The hooks run for Common Lisp mode are fi:lisp-mode-hook and
fi:common-lisp-mode-hook.  They are done last in the mode initialization.


3. Running Lisp

   For the bindings setup in the editing modes to be useful, there
must be a Lisp to which Emacs can communicate.  The following are the
commands needed to make a buffer to interact with Lisp:

%mode: fi:inferior-common-lisp-mode
%% fi:common-lisp
%% fi:another-common-lisp
%% fi:common-lisp-prompt-pattern
%% fi:default-common-lisp-file-name
%% fi:default-common-lisp-image-arguments
%% fi:explicit-common-lisp-file-name
%% fi:explicit-common-lisp-image-arguments

   An inferior Common Lisp is initialized by the following function
and variables:

%% fi:inferior-common-lisp-mode
%% fi:inferior-common-lisp-mode-map
%% fi:inferior-common-lisp-mode-super-key-map

   If fi:common-lisp or fi:another-common-lisp is given a prefix
argument, a TCP/IP socket is used for communication with a `remote'
Common Lisp:

%mode: fi:tcp-lisp-mode
%% fi:tcp-lisp-mode
%% fi:tcp-lisp-mode-map
%% fi:tcp-lisp-mode-super-key-map

%% fi:unix-domain
%% fi:unix-domain-socket
%% fi:excl-service-name
%% fi:local-host-name
%% fi:source-info-not-found-hook


3.1 Super-keys

   Superkeys are keys which are handled specially at the end of a
buffer; at then end of a buffer it has a buffer specific meaning, but
anywhere else in the buffer it has the normal global meaning (obtained
by looking the key up in the global keymap).  This way, ^D can send an
EOF to the Lisp process at the end of a buffer but "delete character"
anywhere else.

   Superkeys are turned off by default.

%% fi:subprocess-enable-superkeys

3.2 File Name Completion

   The keybinding for TAB does file name completion in subprocess
buffers.  The relevant functions are:

%mode: fi:inferior-common-lisp-mode
%% fi:shell-file-name-completion
%% fi:shell-token-pattern


3.3 Input Ring

   All input typed to a subprocess buffer is saved in a ring.  The
following functions retrieve input and manipulate the ring:

%mode: fi:inferior-common-lisp-mode
%% fi:pop-input
%% fi:push-input
%% fi:list-input-ring
%% fi:re-search-backward-input
%% fi:re-search-forward-input
%% fi:input-region
%% fi:default-input-ring-max


3.4 General Subprocess features

   The following functions are bound to keys the subprocess modes:

%% fi:subprocess-kill-input
%% fi:subprocess-beginning-of-line
%% fi:subprocess-backward-kill-word
%% fi:subprocess-kill-output
%% fi:subprocess-quit
%% fi:subprocess-send-flush
%% fi:subprocess-show-output
%% fi:subprocess-suspend

   The following three functions are used in fi:inferior-lisp-mode to
interrupt, kill or input an end-of-file to the Lisp process:

%% fi:subprocess-interrupt
%% fi:subprocess-kill
%% fi:subprocess-send-eof

   The following three functions are used in fi:tcp-lisp-mode to
interrupt, kill and input an end-of-file to the Lisp process at the
other end of the TCP/IP socket:

%% fi:tcp-lisp-interrupt-process
%% fi:tcp-lisp-kill-process
%% fi:tcp-lisp-send-eof

   The following variables control general features of subprocess
interaction:

%% fi:subprocess-superkey
%% fi:subprocess-continuously-show-output-in-visible-buffer
%% fi:subprocess-map-nl-to-cr
%% fi:subprocess-write-quantum

   The following three variables are used to track the shell commands
which change the current working directory.  For Common Lisp, the
aliases in Appendix A together with these variables will allow Common
Lisp to emulate the shell commands and for Emacs to track them:

%% fi:shell-cd-regexp
%% fi:shell-popd-regexp
%% fi:shell-pushd-regexp


			      APPENDIX A
			       Examples

A.1 Sample .emacs file

    (load "fi/site-init.el")
    ;; turn on superkeys in subprocess modes
    (setq-default fi:subprocess-enable-superkeys t)

A.2 Remote Lisps
   To get a remote lisp:

    (setq explicit-common-lisp-file-name "rsh")
    (setq explicit-common-lisp-image-arguments '("frozen" "cl"))

A.3 X11R2

    ;; toy mouse bindings when using X windows

    (require 'x-mouse)

    (defun x-lisp-find-tag (arg)
      (x-mouse-set-point arg)
      (cond ((eq major-mode 'fi:common-lisp-mode)
	     (fi:lisp-find-tag))
	    (t (find-tag-other-window (find-tag-default)))))

    (defun x-lisp-eval-defun (arg)
      (x-mouse-set-point arg)
      (cond ((memq major-mode '(fi:common-lisp-mode fi:franz-lisp-mode
				fi:lisp-mode))
	     (fi:lisp-eval-defun nil))
	    ((eq major-mode 'fi:emacs-lisp-mode)
	     (eval-defun))))

    (defun x-lisp-arglist (arg)
      (x-mouse-set-point arg)
      (cond ((eq major-mode 'fi:common-lisp-mode)
	     (fi:lisp-arglist))
	    (t (describe-function (intern (find-tag-default))))))

    (define-key mouse-map x-button-left-up 'x-lisp-find-tag)
    (define-key mouse-map x-button-middle-up 'x-lisp-eval-defun)
    (define-key mouse-map x-button-right-up 'x-lisp-arglist)

    ;; we ignore downward mouse motion, because if we put something on it the
    ;; `up' event will cause the minibuffer output to disappear

    (define-key mouse-map x-button-left 'x-mouse-ignore)
    (define-key mouse-map x-button-middle 'x-mouse-ignore)
    (define-key mouse-map x-button-right 'x-mouse-ignore)
    (define-key mouse-map x-button-c-left 'x-mouse-ignore)

			      APPENDIX A
			       Examples

A.4 Allegro CL top-level alias example

   Putting the following expressions into ~/.clinit.cl will allow
emacs, for buffers in fi:inferior-common-lisp-mode, to track the
current working directory of the inferior Lisp process:

    (defvar *directory-stack*
      (list (namestring
	     (setq *default-pathname-defaults* (current-directory)))))

    (tpl:alias ("pd" :string) (&optional dir)
      (if* (string= "" dir)
	 then (let ((old-top (pop *directory-stack*))
		    (new-top (pop *directory-stack*)))
		(push old-top *directory-stack*)
		(push (chdir new-top) *directory-stack*))
	 else (push (chdir dir) *directory-stack*))
      (format t "~a~%" *directory-stack*))

    (tpl:alias "popd" ()
      (if (> (length *directory-stack*) 1)
	  (pop *directory-stack*)
	(format t "nothing to pop into~%"))
      (chdir (car *directory-stack*))
      (format t "~a~%" *directory-stack*))

    (tpl:alias "dirs" ()
      (format t "~a~%" *directory-stack*))

    (tpl:alias ("cd" :string) (dir)
      ;; the following does update *default-pathname-defaults*
      (setf (car *directory-stack*)
	(apply #'chdir
	       (if (string= "" dir) nil (list dir))))
      (format t "~a~%" *directory-stack*))

    (tpl:alias "pwd" ()
      (format t "process cwd = ~a~%*default-pathname-defaults* = ~a~%"
	      (namestring (current-directory))
	      (namestring (truename *default-pathname-defaults*))))

			      APPENDIX B
			  Franz Lisp Support

B.1 Introduction

B.2 Editing Franz Lisp Source

   As with Common Lisp, editing a Franz Lisp source file (.l
extension) causes fi:franz-lisp-mode to be invoked.  The order of
setup in the mode follows that of fi:common-lisp-mode.

   Package system setup also occurs as in fi:common-lisp-mode.

   Franz Lisp does not support the commands depending on TCP/IP.

   The mode function and keymap:

%mode: fi:franz-lisp-mode
%% fi:franz-lisp-mode-map

   The hooks run are fi:lisp-mode-hook and fi:franz-lisp-mode-hook,
and are done last in the mode initialization.

   The commands for starting up Franz Lisp processes:

%mode: fi:inferior-franz-lisp-mode
%% fi:franz-lisp
%% fi:another-franz-lisp
%% fi:franz-lisp-prompt-pattern
%% fi:default-franz-lisp-file-name
%% fi:default-franz-lisp-image-arguments
%% fi:explicit-franz-lisp-file-name
%% fi:explicit-franz-lisp-image-arguments
%% fi:inferior-franz-lisp-mode
%% fi:inferior-franz-lisp-mode-map
%% fi:inferior-franz-lisp-mode-super-key-map
